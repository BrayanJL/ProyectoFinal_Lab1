/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;

import AccesoADatos.EntrenadorData;
import Entidades.Entrenador;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Zully
 */
public class GestionEntrenadores extends javax.swing.JInternalFrame {

    /**
     * Creates new form NewJInternalFrame
     */
    
    private DefaultTableModel modeloEntrenador;
    private EntrenadorData entrenadorData = new EntrenadorData();
    private Entrenador entrenadorActual = null;
    private boolean cambiosHabilitados = false;
    
    public GestionEntrenadores() {
        initComponents();
        modeloEntrenador = (DefaultTableModel) jtEntrenador.getModel();
        llenarTabla();
        jrbEstado.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlNombre = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jlDNI = new javax.swing.JLabel();
        jtfDNI = new javax.swing.JTextField();
        jlApellido = new javax.swing.JLabel();
        jtfApellido = new javax.swing.JTextField();
        jlEspecialidad = new javax.swing.JLabel();
        jtfEspecialidad = new javax.swing.JTextField();
        jlEstado = new javax.swing.JLabel();
        jtfEstado = new javax.swing.JTextField();
        jrbEstado = new javax.swing.JRadioButton();
        jlEntrenador = new javax.swing.JLabel();
        jbDeshabilitar = new javax.swing.JButton();
        jbAgregar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbModificar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtEntrenador = new javax.swing.JTable();
        jbEntrenadores = new javax.swing.JButton();
        jbEntrenadoresActivos = new javax.swing.JButton();
        jbEntrenadoresInactivos = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(181, 181, 181));

        jlNombre.setText("Nombre");

        jlDNI.setText("DNI");

        jlApellido.setText("Apellido");

        jlEspecialidad.setText("Especialidad");

        jlEstado.setText("Estado");

        jtfEstado.setEnabled(false);

        jrbEstado.setText("Empezar como activo");
        jrbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlDNI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlEspecialidad)
                            .addComponent(jlApellido))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jrbEstado))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDNI)
                    .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlEspecialidad)
                    .addComponent(jtfEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlApellido)
                    .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNombre))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlEstado)
                    .addComponent(jtfEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbEstado))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlEntrenador.setText("ENTRENADOR:");

        jbDeshabilitar.setText("DESHABILITAR");
        jbDeshabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeshabilitarActionPerformed(evt);
            }
        });

        jbAgregar.setText("AGREGAR");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jbBuscar.setText("BUSCAR");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbModificar.setText("MODIFICAR");
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });

        jtEntrenador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DNI", "Nombre", "Apellido", "Especialidad", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtEntrenador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtEntrenadorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtEntrenador);

        jScrollPane2.setViewportView(jScrollPane1);

        jbEntrenadores.setText("Listar Entrenadores");
        jbEntrenadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntrenadoresActionPerformed(evt);
            }
        });

        jbEntrenadoresActivos.setText("Listar Entrenadores Activos");
        jbEntrenadoresActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntrenadoresActivosActionPerformed(evt);
            }
        });

        jbEntrenadoresInactivos.setText("Listar Entrenadores Inactivos");
        jbEntrenadoresInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntrenadoresInactivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlEntrenador, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbBuscar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbModificar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbDeshabilitar, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                            .addComponent(jbAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jbEntrenadoresInactivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbEntrenadoresActivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbEntrenadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlEntrenador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAgregar)
                        .addGap(4, 4, 4)
                        .addComponent(jbBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDeshabilitar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jbEntrenadores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEntrenadoresActivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEntrenadoresInactivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean isCambiosHabilitados() {
        return cambiosHabilitados;
    }

    public void setCambiosHabilitados(boolean cambiosHabilitados) {
        this.cambiosHabilitados = cambiosHabilitados;
    }
    
    
    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed
        if (!isCambiosHabilitados()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar o buscar un entrenador "
                    + "antes de modificarlo");
            return;
        }
        
        if (jbModificar.getText().equals("MODIFICAR")) {
            reestablecerControles();         
            entrenadorActual = entrenadorData.buscarEntrenadorPorDni(entrenadorActual.getDni());
            String id = String.valueOf(entrenadorActual.getIdEntrenador());
  
            jlEntrenador.setText("Llene los campos con los nuevos datos del entrenador "
                    + "(ID:" + id + ")");
            jlEntrenador.setForeground(Color.BLUE);
            jtfDNI.requestFocusInWindow();
            jbModificar.setText("GUARDAR CAMBIOS");
            
            setCambiosHabilitados(true);
        }
        else if (validacionFormulario()) {
            int id = entrenadorActual.getIdEntrenador();
            setearEntrenadorConDatosDelFormulario();
            entrenadorActual.setIdEntrenador(id);
            entrenadorData.modificarEntrenador(entrenadorActual);
            llenarTabla();
            reestablecerControles();
        }
    }//GEN-LAST:event_jbModificarActionPerformed

    private void jbDeshabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeshabilitarActionPerformed
        if (!isCambiosHabilitados()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar o buscar un entrenador "
                    + "antes de modificarlo");
            return;
        }
        
        if (jbDeshabilitar.getText().equals("DESHABILITAR")) {
            entrenadorData.deshabilitarEntrenador(entrenadorActual.getDni());
            entrenadorActual = entrenadorData.buscarEntrenadorPorDni(entrenadorActual.getDni());
            llenarCampos();
            llenarTabla();
        }
        else {
            entrenadorData.habilitarEntrenador(entrenadorActual.getDni());
            entrenadorActual = entrenadorData.buscarEntrenadorPorDni(entrenadorActual.getDni());
            llenarCampos();
            llenarTabla();
        }
    }//GEN-LAST:event_jbDeshabilitarActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        if (jbAgregar.getText().equals("AGREGAR")) {
            reestablecerControles();
            jlEntrenador.setText("Llene los campos con los datos del entrenador a ingresar");
            jlEntrenador.setForeground(Color.BLUE);
            jtfDNI.requestFocusInWindow();
            jbAgregar.setText("GUARDAR CAMBIOS");
            jtfEstado.setText("Inactivo");
            jrbEstado.setVisible(true);
        }
        else if (validacionFormulario()) {
            setearEntrenadorConDatosDelFormulario();  
            if(entrenadorData.buscarEntrenadorPorDni(entrenadorActual.getDni()) == null){    
                entrenadorData.guardarEntrenador(entrenadorActual);        
                reestablecerControles();
                llenarTabla();
            }
            else {
                JOptionPane.showMessageDialog(this, "Este entrenador ya existe");
            }    
        }
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jrbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEstadoActionPerformed
        if (!jrbEstado.isSelected()) {
            jtfEstado.setText("Inactivo");
        }
        else jtfEstado.setText("Activo");
    }//GEN-LAST:event_jrbEstadoActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        if (jbBuscar.getText().equals("BUSCAR")){
            reestablecerControles();
            jlEntrenador.setText("Escriba el DNI del entrenador que busca");
            jlEntrenador.setForeground(Color.BLUE);
            jtfDNI.requestFocusInWindow();
            jtfNombre.setEnabled(false);
            jtfApellido.setEnabled(false);
            jtfEspecialidad.setEnabled(false);
            jbBuscar.setText("CONFIRMAR BÚSQUEDA");
        }
        else if (validacionDNI()) {
            int dni = Integer.parseInt(jtfDNI.getText());
            entrenadorActual = entrenadorData.buscarEntrenadorPorDni(dni);
            reestablecerControles(); 
            
            if (entrenadorActual != null) {
                llenarCampos();
                setCambiosHabilitados(true);
                setearEntrenadorConDatosDelFormulario();
            }
            else {
                JOptionPane.showMessageDialog(this, "Entrenador no encontrado");
            }
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbEntrenadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntrenadoresActionPerformed
        llenarTabla();
    }//GEN-LAST:event_jbEntrenadoresActionPerformed

    private void jbEntrenadoresActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntrenadoresActivosActionPerformed
        limpiarTabla();
        List<Entrenador> entrenadores;
        entrenadores = entrenadorData.listarEntrenadoresActivos();
        
        for (Entrenador e : entrenadores) {
            modeloEntrenador.addRow(new Object[]{
                e.getIdEntrenador(),
                e.getDni(),
                e.getNombre(),
                e.getApellido(),
                e.getEspecialidad(),
                e.isEstado()
            });
        }
    }//GEN-LAST:event_jbEntrenadoresActivosActionPerformed

    private void jbEntrenadoresInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntrenadoresInactivosActionPerformed
        limpiarTabla();
        List<Entrenador> entrenadores;
        entrenadores = entrenadorData.listarEntrenadoresNoActivos();
        
        for (Entrenador e : entrenadores) {
            modeloEntrenador.addRow(new Object[]{
                e.getIdEntrenador(),
                e.getDni(),
                e.getNombre(),
                e.getApellido(),
                e.getEspecialidad(),
                e.isEstado()
            });
        }
    }//GEN-LAST:event_jbEntrenadoresInactivosActionPerformed

    private void jtEntrenadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtEntrenadorMouseClicked
        if(jtEntrenador.getSelectedRow() != -1) {
            reestablecerControles();
            int fila = jtEntrenador.getSelectedRow();
            jtfDNI.setText(String.valueOf(modeloEntrenador.getValueAt(fila, 1)));
            jtfNombre.setText(String.valueOf(modeloEntrenador.getValueAt(fila, 2)));
            jtfApellido.setText(String.valueOf(modeloEntrenador.getValueAt(fila, 3)));
            jtfEspecialidad.setText(String.valueOf(modeloEntrenador.getValueAt(fila, 4)));
      
            if (String.valueOf(modeloEntrenador.getValueAt(fila, 5)).equals("true")) {
                jtfEstado.setText(String.valueOf("Activo"));
                jbDeshabilitar.setText("DESHABILITAR");
            }
            else {
                jtfEstado.setText(String.valueOf("Inactivo"));
                jbDeshabilitar.setText("HABILITAR");
            }
           
            setCambiosHabilitados(true);
            setearEntrenadorConDatosDelFormulario();
        }
    }//GEN-LAST:event_jtEntrenadorMouseClicked

    private void llenarCampos() {
        jtfDNI.setText(String.valueOf(entrenadorActual.getDni()));
        jtfNombre.setText(entrenadorActual.getNombre());
        jtfApellido.setText(entrenadorActual.getApellido());
        jtfEspecialidad.setText(entrenadorActual.getEspecialidad());
                
        if(entrenadorActual.isEstado()) {
            jtfEstado.setText("Activo");
            jbDeshabilitar.setText("DESHABILITAR");
        }
        else {
            jtfEstado.setText("Inactivo");
            jbDeshabilitar.setText("HABILITAR");
        }
    }
    
    private void limpiarCampos() {
        jtfDNI.setText("");
        jtfNombre.setText("");
        jtfApellido.setText("");
        jtfEspecialidad.setText("");
        jtfEstado.setText("");
    }
    
    private void reestablecerControles() {
        jlEntrenador.setText("Entrenador:");
        jlEntrenador.setForeground(Color.BLACK);
        jbAgregar.setText("AGREGAR");
        jbModificar.setText("MODIFICAR");
        jbBuscar.setText("BUSCAR");
        jtfNombre.setEnabled(true);
        jtfApellido.setEnabled(true);
        jtfEspecialidad.setEnabled(true);
        jrbEstado.setSelected(false);
        jrbEstado.setVisible(false);
        setCambiosHabilitados(false);
        limpiarCampos();
    }
    
    private void setearEntrenadorConDatosDelFormulario() {
        int dni = Integer.parseInt(jtfDNI.getText());
        String nombre = jtfNombre.getText();
        String apellido = jtfApellido.getText();
        String especialidad = jtfEspecialidad.getText();
        boolean estado = jtfEstado.getText().equals("Activo");
        
        entrenadorActual = new Entrenador(dni, nombre, apellido, especialidad, estado);
    }
    
    private boolean validacionFormulario() {
        if (!validacionDNI()) {
            return false;
        }
        if (!validacionNombre()) {
            return false;
        }
        if (!validacionApellido()) {
            return false;
        }
        if (!validacionEspecialidad()) {
            return false;
        }
        return true;
    }
    
    private boolean validacionDNI() {
        if (jtfDNI.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo DNI vacío.");
            jtfDNI.requestFocusInWindow();
            return false;
        }
        
        try{        
            Integer.parseInt(jtfDNI.getText());
        }catch(Exception nfe){
            JOptionPane.showMessageDialog(this, "El DNI debe ser un nro.");
            return false;
        }
        
        if (Integer.parseInt(jtfDNI.getText()) < 0) {
            JOptionPane.showMessageDialog(this, "El DNI debe ser un nro positivo.");
            return false;
        }
        
        return true;
    }
    
    private boolean validacionApellido(){
        if (jtfApellido.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Apellido vacío.");
            jtfApellido.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    private boolean validacionNombre(){
        if (jtfNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Nombre vacío.");
            jtfNombre.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    private boolean validacionEspecialidad() {
        if (jtfEspecialidad.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Especialidad vacío.");
            jtfEspecialidad.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    private void limpiarTabla(){
        for (int i = modeloEntrenador.getRowCount(); i>0; i--)
            modeloEntrenador.removeRow(0);
    }
    
    private void llenarTabla() {
        limpiarTabla();
        List<Entrenador> entrenadores;
        entrenadores = entrenadorData.listarEntrenadores();
        
        for (Entrenador e : entrenadores) {
            modeloEntrenador.addRow(new Object[]{
                e.getIdEntrenador(),
                e.getDni(),
                e.getNombre(),
                e.getApellido(),
                e.getEspecialidad(),
                e.isEstado()
            });
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbDeshabilitar;
    private javax.swing.JButton jbEntrenadores;
    private javax.swing.JButton jbEntrenadoresActivos;
    private javax.swing.JButton jbEntrenadoresInactivos;
    private javax.swing.JButton jbModificar;
    private javax.swing.JLabel jlApellido;
    private javax.swing.JLabel jlDNI;
    private javax.swing.JLabel jlEntrenador;
    private javax.swing.JLabel jlEspecialidad;
    private javax.swing.JLabel jlEstado;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JRadioButton jrbEstado;
    private javax.swing.JTable jtEntrenador;
    private javax.swing.JTextField jtfApellido;
    private javax.swing.JTextField jtfDNI;
    private javax.swing.JTextField jtfEspecialidad;
    private javax.swing.JTextField jtfEstado;
    private javax.swing.JTextField jtfNombre;
    // End of variables declaration//GEN-END:variables
}
